--WebTL - библиотека для работа с технологиями Интернет (c) Златовратский Павел(ТБ.Бюджет), 2017

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited TUL.Promise "Асинхронный результат HTTP-запроса";

inclass
   func Create: HTTPAsync;
    Result = inherited Create;
    result.ready_ = False;
    Result.request = AutoObject.Create("Msxml2.ServerXMLHTTP.6.0");
  end;

inobject
  request: AutoObject; --XMLHTTPRequest текущего запроса
  Parser: Variant; --Ссылка на метод-парсер или его кодовое обозначение
  ParserHandle: Integer[]; --Коды ошибок, которые обрабатывает парсер
  postprocess: TUL.FuncObj; --Дополнительная обработка результата
  result_: Variant;
  ready_: Logical;

  func Equal(ob:HTTPAsync):Logical;
    if ob = nil then
       return False;
    end;
    Result = (ob.id = self.id);
  end;

  proc Wait;
     while not ready do
       request.waitForResponse(1000);
    od;
  end;

  func Ready:Logical;
    if self.ready_ then
      return True;
    fi;
    --(4) COMPLETED All the data has been received, 
    -- and the complete data is available in the responseBody and responseText properties.
    return (request.readystate = 4);
  end;

  proc Abort;
    inherited Abort;
    self.request.abort;
  end;

  func Get_:Variant;
    if self.ready_ then
       return self.result_;
    fi;
    self.Wait;
    result = HTTPCall.ParseResponse(self.request, self.Parser, self.ParserHandle);
    if self.postprocess <> nil then
       result = self.postprocess.Call([result]);
    end;
    self.result_ = result;
    self.ready_ = True;
  end;

end