--WebTL - библиотека для работа с технологиями Интернет (c) Златовратский Павел(ТБ.Бюджет), 2017

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited TUL.FuncObj "Веб-метод";
inclass
  external func MultiByteToWideChar(cp: Integer; dwFlags: Integer;
     const AnsiStr: String; AnsiStrL: Integer; var WStr: String; WStrL: Integer) :Integer;
    library "kernel32" name "MultiByteToWideChar";

  func ParseResponse(request: Object; Parser: Variant; ParserHandle:Integer[]): Variant;
  var xRes: AutoObject;
  var tmp: String;
  var tmpI:Integer;
    --Ошибки HTTP
    if request.status >= 300 and not request.status in ParserHandle then
       --Данные с кодом 3хх - тоже ошибки
       SetError(request.status, request.statusText);
    end;
    tmp = request.responseText;
    if Substr(tmp,1,5) = "<?xml" and Pos("1251", Substr(tmp,6,40)) > 0 then
       tmpI = request.responseBody.Size;
       tmp = RepStr(chr(20), tmpI);
       MultiByteToWideChar(1251,0,TUL.Unicode.BOToPseudoByte(request.responseBody), tmpI, tmp, tmpI);
    fi;
    if Parser = nil then
      return tmp;
    elsif varType(Parser) = varObject and Parser is TUL.FuncObj:
      return Parser.Call([tmp]); --TODO: Это пока хрень, сделать проверку по входным типам
    elsif varType(Parser) = varString and Parser = "JSON" then
      --А еще сюда могут вести заголовки!
      --tmp = request.responseText;
      return TUL.JSON.Parse(tmp);
    elsif Parser is TUL.XMLMapperNode then
      --Указание на корень
      xRes = request.responseXML;
      return Parser.LoadNodeValue(xRes.documentElement);
    elsif Parser is TUL.XMLMapper then
      --Указание на содержимое корня
      xRes = request.responseXML;
      return Parser.ParseNode(xRes.documentElement);
    end;
  end;

inobject
  Parser: Variant; --Ссылка на метод-парсер или его кодовое обозначение
  Username: String;  --Логин на страничку (если нужен)
  Password: String;  --Пароль от логина на страничку (если нужен)
  ParserHandle: Integer[]; --Коды ошибок, которые обрабатывает парсер
  Timeouts: Integer[]; --Таймауты

  proc setTimeouts(resolveTimeout:Integer=60; connectTimeout:Integer=60;
                   sendTimeout:Integer=30; receiveTimeout:Integer=30);
    self.Timeouts = [resolveTimeout, connectTimeout, sendTimeout, receiveTimeout];
  end;

  func DoRequest(URL:String; Method:String="GET";  Body:Variant=nil;
                 Headers:Storage=nil; Async:Logical=True):Variant;
  var Request: AutoObject;
  var AsyncCla: Class;
  var i: Integer;
    try
      AsyncCla = FindClass('WebTL.HTTPAsync');
    except
      -- Нет класса для асинхронного ответа - работаем строго синхронно
      Async = False;
    end;
    if Async then
      Result = AsyncCla.Create;
      Result.Parser = Parser;
      Result.ParserHandle = ParserHandle;
      request = Result.request;
    else
      request = AutoObject.Create("Msxml2.ServerXMLHTTP.6.0");
    end;
    --Установка таймаутов
    if LengthOfArray(self.Timeouts) = 4:
       request.setTimeouts(Timeouts[1], Timeouts[2], Timeouts[3], Timeouts[4]);
    fi;
    --запрос с авторизацией
    if Username <> nil then
      request.open(Method, URL, Async, Username, Password);
    else
      request.open(Method, URL, Async);
    end;

    if Headers <> nil then
      for i = 1..Headers.Count do
        request.setRequestHeader(Headers.IndexByNumber[i], Headers.ItemsByNumber[i]);
      end;
    end;
    if Body = nil:
      request.send();
    else
      request.send(Str(Body));
    fi;

    if not Async then  --Асинхронка уже свой запрос получила и ждет ответа
       return HTTPCall.ParseResponse(request, self.Parser, self.ParserHandle);
    end;
    --Возврат асинхронного ответа будет за счёт присовения его в Result ранее
  end;

end